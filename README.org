#+TITLE: My literate GNU Emacs config
#+AUTHOR: Tristan Floch

#+STARTUP: overview

* Package management
** Setup package.el to work with MELPA, ELPA and ORG

#+begin_src emacs-lisp
    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")
			     ("elpa" . "https://elpa.gnu.org/packages/")))

    (package-initialize)

    (unless package-archive-contents
      (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
    (require 'use-package-ensure)
    (setq use-package-always-ensure t)
#+end_src

** =use-package= auto updates

#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src

* Appearance
** Icons

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t)
#+end_src

** Windows decorations off

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1) 
  (scroll-bar-mode -1)
#+end_src

** TODO Dashboard

#+begin_src emacs-lisp
  (use-package page-break-lines) ; optional dependency
  (setq inhibit-startup-message t)
  (use-package dashboard
    :ensure t
    :init
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs > All")
    (setq dashboard-startup-banner 'official)
    (setq dashboard-items '((recents . 5)
			    (agenda . 5 )
			    (bookmarks . 3)
			    (projects . 3)))
    :config
    (dashboard-setup-startup-hook)
    )
#+end_src

Ensures that =emacsclient= always opens on dashboard rather than scratch.
#+begin_src emacs-lisp
 ;; (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
** Theme

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config

    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)

    (load-theme 'doom-dracula t))
#+end_src

** Fonts

Taken from NANO Emacs.

#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :font "Roboto Mono" :height 140 :weight 'light)
(set-face-attribute 'bold nil
                    :family "Roboto Mono" :weight 'regular)
(set-face-attribute 'italic nil
                    :family "Victor Mono" :weight 'semilight :slant 'italic)
(set-fontset-font t 'unicode
                  (font-spec :name "Inconsolata Light" :size 16) nil)
(set-fontset-font t '(#xe000 . #xffdd)
                  (font-spec :name "RobotoMono Nerd Font" :size 12) nil)

(setq global-prettify-symbols-mode t)
#+end_src

*** Zooming in and out

#+begin_src emacs-lisp
;; zoom in/out like we do everywhere else.
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

*** Emojis

#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src

** Line and column numbers

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
#+end_src

Prevent the display of line numbers for some modes:

#+begin_src emacs-lisp
  (dolist (mode '(term-mode-hook
		  eshell-mode-hook
		  treemacs-mode-hook
		  calendar-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** TODO Cursor

#+begin_src emacs-lisp
(setq cursor-in-non-selected-windows nil)
#+end_src

* Which Key

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :init
    (setq which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-separator " → ")

    (which-key-mode))
#+end_src

* Vertico

#+begin_src emacs-lisp

  ;; builtins emacs variables
  (setq read-file-name-completion-ignore-case t
	read-buffer-completion-ignore-case t
	completion-ignore-case t)

  (use-package vertico
    :bind (:map vertico-map
		("C-j" . vertico-next)
		("C-k" . vertico-previous))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
  #+end_src

Fuzzy search completion
  
#+begin_src emacs-lisp
  (use-package orderless
    :custom (completion-styles '(orderless)))
#+end_src

Builtin package to remember history for commands

#+begin_src emacs-lisp
  (use-package savehist
    :init
    (savehist-mode))
#+end_src

Adds information for completions

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
 #+end_src
  
* Key bindings
** Better escape

Make ESC qui prompts.
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Evil mode

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t
	  evil-want-keybinding nil
	  evil-vsplit-window-right t
	  evil-split-window-below t
	  evil-want-C-u-scroll t
	  evil-undo-system 'undo-redo)
    :config
    (evil-mode 1)

    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    ;; Use visual line motions even outside of visual-line-mode buffers
    ;; (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    ;; (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    )

  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer magit))
    (evil-collection-init))

#+end_src

** General

#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
    (general-evil-setup t)
    (general-create-definer tf/leader-keys
      :keymaps '(normal insert visual emacs help-map)
      :prefix "SPC"
      :global-prefix "C-SPC")
    )
#+end_src

#+begin_src emacs-lisp
  (general-evil-define-key 'normal 'global
    "g c c" #'evilnc-comment-or-uncomment-lines)
  (general-evil-define-key 'visual 'global
    "g c" #'evilnc-comment-or-uncomment-lines
    "g r" #'eval-region)
#+end_src


#+begin_src emacs-lisp
  (tf/leader-keys
   "." '(counsel-find-file :which-key "Find file")
   "`" '(evil-switch-to-windows-last-buffer :which-key "Switch to last buffer")
   )
#+end_src

#+begin_src emacs-lisp
(tf/leader-keys
 "b" '(:ignore t :which-key "buffers")
 "bk" '(kill-current-buffer :which-key "Kill buffer")
 "bb" '(switch-to-buffer :which-key "Switch workspace buffer")
 "bB" '(switch-to-buffer :which-key "Switch buffer")
 "bi" '(ibuffer :which-key "iBuffer")
 "bs" '(basic-save-buffer :which-key "Save buffer")
 )
#+end_src

#+begin_src emacs-lisp
  (tf/leader-keys
    "s" '(:ignore t :which-key "search")
    "ss" '(counsel-grep-or-swiper :which-key "Search buffer")
    "sb" '(counsel-grep-or-swiper :which-key "Search buffer")
    )
#+end_src

#+begin_src emacs-lisp
  (tf/leader-keys
   "t" '(:ignore t :which-key "toggle")
   "t w" '(toggle-truncate-lines :which-key "Lines wrapping")
   )
#+end_src

Bind "SPC w" to "C-w".
#+begin_src emacs-lisp
  (tf/leader-keys
    "w" '(evil-window-map :which-key "window"))
#+end_src

Bind "SPC h" to "C-h".
#+begin_src emacs-lisp
  (tf/leader-keys
   "h" '(help-command :which-key "help")
   "ht" '(counsel-load-theme :which-key "Load theme")
  )

  (general-define-key
   :keymaps 'help-map
   ;; allow keys before bound keys in match
   ;; since binding in a prefix map
   :wk-full-keys nil
   ;; make a prefix-command and add description
   "r" '(:prefix-command tf/reload-prefix-map :which-key "reload")
   "rr" '((lambda () (interactive) (load-file "~/.emacs.d.gnu/init.el")) :which-key "Reload Emacs config")
   )
#+end_src

#+begin_src emacs-lisp
(tf/leader-keys
 "f" '(:ignore t :which-key "file")
 "f f" '(counsel-find-file :which-key "Find file")
 "f r" '(counsel-recentf :which-key "Recent files")
 "f C" '(copy-file :which-key "Copy this file")
 "f s" '(save-buffer :which-key "Save file")
 "f D" '(delete-file :which-key "Delete this file")
 "f R" '(rename-file :which-key "Rename/move file")
 "f u" '(sudo-edit-find-file :which-key "Sudo find file")
 "f U" '(sudo-edit :which-key "Sudo this file")
 ;; "f p" TODO
 )
#+end_src

#+begin_src emacs-lisp
  (tf/leader-keys
    "q" '(:ignore t :which-key "quit")
    "qq" '(save-buffers-kill-terminal :which-key "Save and quit Emacs")
    "qr" '(:ignore t :which-key "reload")
    "qrR" '((lambda () (interactive) (load-file "~/.emacs.d.gnu/init.el")) :which-key "Reload config only")
    )
#+end_src

** Hydra

#+begin_src emacs-lisp
(use-package hydra
  :defer t)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("q" nil "quit" :exit t))

(tf/leader-keys
 "ts" '(hydra-text-scale/body :which-key "Scale text"))
#+end_src
     
* TODO Dired

#+begin_src emacs-lisp
(use-package all-the-icons-dired)
#+end_src

* Org mode config
** General variables

#+begin_src emacs-lisp
  (setq
   org-directory "~/Documents/orgfiles/"
   org-ellipsis " ▼"
   org-src-fontify-natively t
   org-src-tab-acts-natively t
   org-confirm-babel-evaluate nil
   org-edit-src-code-indentation 0
   org-blank-before-new-entry (quote ((heading . nil)
				      (plain-list-item . nil)))
   )
#+end_src

** Bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+end_src

** Source block

Allows for =<s= followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to             |
|------------------------+------------------------|
| <a                     | =#+BEGIN_EXPORT ascii= |
| <c                     | =#+BEGIN_CENTER=       |
| <C                     | =#+BEGIN_COMMENT=      |
| <e                     | =#+BEGIN_EXAMPLE=      |
| <E                     | =#+BEGIN_EXPORT=       |
| <h                     | =#+BEGIN_EXPORT html=  |
| <l                     | =#+BEGIN_EXPORT latex= |
| <q                     | =#+BEGIN_QUOTE=        |
| <s                     | =#+BEGIN_SRC=          |
| <v                     | =#+BEGIN_VERSE=        |

#+begin_src emacs-lisp
(use-package org-tempo
  :ensure nil) ;; tell use-package not to try to install org-tempo since it's already there.
#+end_src

** Table of contents

#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable)
    )
#+end_src

** Keymaps

#+begin_src emacs-lisp
  (general-evil-define-key 'normal org-mode-map
    "TAB" 'org-cycle)
#+end_src

* Prog mode
** Rainbow delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :config (projectile-mode)
    :custom ((projectile-completion-system 'auto))
    )
#+end_src

#+begin_src emacs-lisp
  (tf/leader-keys
    "p" '(:ignore t :which-key "project")
    "p p" '(projectile-switch-project :which-key "Switch project")
    "p a" '(projectile-add-known-project :which-key "Add new project")
    "p s" '(projectile-save-project-buffers :which-key "Save project files")
    "p T" '(projectile-test-project :which-key "Test project")
    "p d" '(projectile-remove-known-project :which-key "Remove known project")
    "p k" '(projectile-kill-buffers :which-key "Kill project buffers")
    "p c" '(projectile-compile-project :which-key "Compile project")
    "p f" '(projectile-find-file :which-key "Find file in project")
    )
#+end_src

* Commenting

The keybinding needs to be added.

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :after evil
    :commands evilnc-comment-or-uncomment-lines)
#+end_src

* Helpful

#+begin_src emacs-lisp
(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

* Magit

#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status)

  (tf/leader-keys
    "g" '(:ignore t :which-key "git")
    "g g" '(magit-status :which-key "Magit status"))

  (use-package forge
    :after magit)
#+end_src


